=encoding utf-8

=head1 НАИМЕНОВАНИЕ

PSGI - Спецификация Веб-серверного Шлюзового Интерфейса для Perl

=head1 ОБЗОР

Этот документ определяет стандартный интерфейс между веб-серверами
и веб-приложениями или фреймворками на Perl. Этот интерфейс призван
содействовать портабельности веб-приложений и сокращению дублирования
усилий разработчиков веб-фреймворков.

Пожалуйста имейте в виду, что PSGI - не просто "Ещё Один Веб-фреймворк".
PSGI - это спецификация, предназначенная для отделения среды веб-сервера
от кода веб-фреймворка. Также PSGI не является программным интерфейсом (API)
для веб-приложений. Разработчики веб-приложений (конечные пользователи) не
будут запускать свои веб-приложения используя PSGI напрямую - вместо этого
предполагается использование фреймворков, поддерживающих PSGI.

=head1 ТЕРМИНОЛОГИЯ

=over 4

=item Веб-серверы

I<Веб-серверы> принимают HTTP запросы от веб-клиентов, передают эти запросы
веб-приложениям (если сконфигурированы делать это) и возвращают HTTP ответы
инициировавшим запрос клиентам.

=item PSGI сервер

I<PSGI сервер> - это программа на Perl, предоставляющая среду для запуска
в ней I<PSGI приложения>.

PSGI определяет интерфейс для веб-приложений и основную задачу веб-приложений,
которая заключается в том, чтобы обслуживать запросы через Интернет. I<PSGI
сервер>, скорее всего, будет либо: частью веб-сервера (как Apache mod_perl),
соединён с веб-сервером (при помощи FastCGI, SCGI), вызываться веб-сервером
(как в старом добром CGI), или же сам по себе будет автономным веб-сервером,
написанным целиком или частично на Perl.


Тем не менее, I<PSGI Сервер> не обязан в действительности быть веб-сервером
или его частью, так как I<PSGI> только определяет интерфейс между сервером
и приложением, а не между сервером и остальным миром.

I<PSGI Сервер> также часто называется I<PSGI Application Conteiner>,
так как он похож на I<Java Servlet container>, который представляет собой
Java процесс, предоставляющий среду для I<сервлетов Java>.

=item Приложения

I<Веб-приложения> принимают HTTP запросы и возвращают HTTP ответы.

I<PSGI приложения> - веб-приложения, соответствующие интерфейсу PSGI.
Они должны принимать форму code reference с определёнными входными
и выходными данными.

Для простоты I<PSGI приложения> также будут называться I<Приложениями>
до конца этого документа.

=item Middleware (связующее ПО)

I<Middleware> (I<Связующее ПО>) - приложение PSGI (code reference) I<а также>
I<Сервер>. I<Middleware> выглядит как I<приложение>, когда вызывается со
стороны I<сервера>, и в свою очередь может вызывать другие I<приложения>.
Можно думать о нём как о I<плагине> для расширения приложения PSGI.

=item Разработчики фреймворков

I<Разработчики фреймворков> - это авторы фреймворков для веб-приложений. Они
пишут адаптеры (или движки), которые принимают входные данные PSGI, запускают
веб-приложение и возвращают ответ PSGI I<серверу>.

=item Разработчики веб-приложений

I<Разработчики веб-приложений> - это разработчики, которые пишут код на основе
веб-фреймворков. Эти рзаработчики никогда не должны иметь дело с PSGI
напрямую.

=back

=head1 СПЕЦИФИКАЦИЯ

=head2 Приложение

Приложение PSGI - это Perl code reference. Оно принимает ровно один аргумент,
окружение, и возвращает ссылку на массив, содержащий ровно три
значения.

  my $app = sub {
      my $env = shift;
      return [
          '200',
          [ 'Content-Type' => 'text/plain' ],
          [ "Hello World" ], # or IO::Handle-like object
      ];
  };

=head3 Окружение

Окружение B<ДОЛЖНО> быть ссылкой на хеш, включащей в себя CGI-подобные
заголовки, как описано ниже. Приложение может свободно изменять окружение.
Окружение B<ДОЛЖНО> содержать эти переменные (заимствовано из
L<PEP 333|http://www.python.org/dev/peps/pep-0333/>,
L<Rack|http://rack.rubyforge.org/doc/files/SPEC.html> и
L<JSGI|http://jackjs.org/jsgi-spec.html>), за исключением тех случаев, когда
они, как правило, пусты.

Если переменная окружения является логической переменной, её значение B<ОБЯЗАНО>
соответствовать нотации Perl для булевых чисел. Это означает, что пустая
строка или явно указанный C<0> являются правильными false значениями. Если
булевый ключ отсутствует, приложение B<МОЖЕТ> интерпретировать его как false
значение.

Значения всех CGI переменных (в имени которых нет точки) B<ДОЛЖНЫ> быть
скалярными строками.

Подробнее см. ниже.

=over 4

=item *

C<REQUEST_METHOD>: Метод HTTP запроса, такой как "GET" или "POST".
Это B<НЕ ДОЛЖНА> быть пустая строка, так что метод всегда должен
присутствовать.

=item *

C<SCRIPT_NAME>: Начальная часть I<пути> URL запроса, соответствущего
приложению. Говорит приложению о своем виртуальном "местоположении". Может
быть пустой строкой, если приложение соответствует корневому URI сервера.

Если этот ключ не пуст, он B<ДОЛЖЕН> начинаться с прямого слэша (C</>).

=item *

C<PATH_INFO>: Остаточная часть I<пути> URL запроса, определяющая виртуальное
"расположение" цели запроса внутри приложения. Может быть пустой строкой, если
запрашиваемый URL указывает на корень приложения и не имеет завершающего
слэша. Это значение должно быть URI-декодировано серверами для того, чтобы
быть совместимым с L<RFC 3875|http://www.ietf.org/rfc/rfc3875>.

Если эта переменная не пуста, она B<ДОЛЖНА> начинаться с прямого слэша (C</>).

=item *

C<REQUEST_URI>: Не декодированная, необработанная строка URL. Это
необработанный путь URI и часть запроса, которые фигурируют в HTTP C<GET /...
HTTP/1.x> строке и не содержат схемы URI и имён хоста.

В отличие от C<PATH_INFO>, это значение B<НЕ ДОЛЖНО> декодироваться сервером.
Это ответственность приложения - правильно декодировать пути для того,
чтобы отображать URL-ы на обработчики приложения, если оно предпочитает
использовать эту переменную окружения вместо C<PATH_INFO>.

=item *

C<QUERY_STRING>: Порция запрашиваемого URL, которая следует за C<?>, если
таковая имеется. Эта переменная B<МОЖЕТ> быть пустой, но B<ДОЛЖНА> всегда
присутствовать, даже если она пуста.

=item *

C<SERVER_NAME>, C<SERVER_PORT>: При комбинации со C<SCRIPT_NAME> и
C<PATH_INFO>, эти переменные окружения могут быть использованы для завершения
URL. Обратите внимание, тем не менее, что C<HTTP_HOST>, если он присутствует,
предпочтительнее использовать, чем C<SERVER_NAME>, для реконструкции
запрашиваемого URL. C<SERVER_NAME> и C<SERVER_PORT> B<НЕ ДОЛЖНЫ> быть пустыми
строками, и всегда должны присутствовать.

=item *

C<SERVER_PROTOCOL>: Версия протокола, используемого клиентом для отправки
запроса. Как правило это будет что-то типа "HTTP/1.0" или "HTTP/1.1" и может
использоваться приложением для определения того, как трактовать заголовки
запроса HTTP.

=item *

C<CONTENT_LENGTH>: Длина содержимого в байтах, в виде целого числа.
Присутствие или отсутствие этой переменной окружения должно соответствовать
присутствию или отсутствию HTTP заголовка Content-Length в запросе.

=item *

C<CONTENT_TYPE>: MIME-тип запроса, в том виде, в каком он указан клиентом.
Присутствие или отсутствие этой переменной окружения должно соответствовать
присутствию или отсутствию HTTP заголовка Content-Type в запросе.

=item *

Переменные C<HTTP_*> : Эти переменные окружения соответствуют предоставленным
клиентом заголовкам HTTP запроса. Присутствие или отсутствие этих ключей
должно соответствовать присутствию или отсутствию соответствующих заголовков
HTTP в запросе.

Переменная окружения получается путём конвертации имени поля заголовка HTTP в
верхний регистр, замещения всех дефисов C<-> на подчёркивания C<_> и
подстановки приставки C<HTTP>, как в L<RFC 3875|http://www.ietf.org/rfc/rfc3875>.

Если есть несколько строк заголовка, отправленных с одним ключём (именем
переменной), серверу следует рассматривать их как будто они были посланы в
одной строке и объединять их при помощи C<, >, как в L<RFC 2616|http://www.ietf.org/rfc/rfc2616>.

=back

В добавление к ключам, описанным выше, окружение PSGI B<ДОЛЖНО> также включать
эти специфичные для PSGI ключи:

=over 4

=item *

C<psgi.version>: Ссылка на массив [1,1], представляющий используемую версию
PSGI. Первое число - мажорная версия, второе - минорная версия.

=item *

C<psgi.url_scheme>: Строка C<http> или C<https>, зависящая от URL запроса.

=item *

C<psgi.input>: входной поток. Подробности см. ниже.

=item *

C<psgi.errors>: поток ошибок. Подробности см. ниже.

=item *

C<psgi.multithread>: Это булево значение, которое B<ДОЛЖНО> быть true, если
приложение может быть одновременно вызвано другой нитью того же процесса,
иначе false.

=item *

C<psgi.multiprocess>: Это булево значение, которое B<ДОЛЖНО> быть true, если
эквивалентный объект приложения может быть одновременно вызван другим
процессом, иначе false.

=item *

C<psgi.run_once>: Булево значение, содержащее true, если сервер ожидает (но не
гарантирует!), что приложение будет вызвано только в этот единственный раз за
время жизни содержащего его процесса. Обычно это бывает верно только для
сервера, основанного на CGI (или на чём-то похожем).


=item *

C<psgi.nonblocking>: Булево значение, содержащее true, если сервер вызывает
приложение в неблокирующем событийном цикле.

=item *

C<psgi.streaming>: Булево значение, равное true, если сервер ожидает
отложенного ответа в стиле callback и потокового пишущего объекта.

=back

Сервер или приложение может также сохранять свои данные в переменных
окружения. Эти переменные B<ДОЛЖНЫ> содержать по меньшей мере одну точку, и их
B<СЛЕДУЕТ> называть начиная с уникальной приставки.

Приставка C<psgi.> зарезервирована для использования с основной спецификацией
PSGI, а приставка C<psgix.> зарезервирована для официально благословлённых
расширений. Эти приставки B<НЕ ДОЛЖНЫ> использоваться другими серверами или
приложением. См. список официально одобренных расширений в
L<psgi-extensions|PSGI::Extentions>.

Окружение B<НЕ ДОЛЖНО> содержать ключи с именем C<HTTP_CONTENT_TYPE> или
C<HTTP_CONTENT_LENGTH>.

Одна из переменных C<SCRIPT_NAME> или C<PATH_INFO> B<ДОЛЖНА> быть установлена.
Когда C<REQUEST_URI> - это C</>, переменной C<PATH_INFO> следует быть равной
C</>, а переменной C<SCRIPT_NAME> следует быть пустой. Переменная
C<SCRIPT_NAME> B<НЕ ДОЛЖНА> быть равной C</>, но B<МОЖЕТ> быть пустой.


=head3 The Input Stream

The input stream in C<psgi.input> is an L<IO::Handle>-like object which
streams the raw HTTP POST or PUT data. If it is a file handle then it
B<MUST> be opened in binary mode. The input stream B<MUST> respond to
C<read> and B<MAY> implement C<seek>.

Perl's built-in filehandles or L<IO::Handle> based objects should work as-is
in a PSGI server. Application developers B<SHOULD NOT> inspect the type or
class of the stream. Instead, they B<SHOULD> simply call C<read> on the object.

Application developers B<SHOULD NOT> use Perl's built-in C<read> or iterator
(C<< <$fh> >>) to read from the input stream. Instead, application
developers should call C<read> as a method (C<< $fh->read >>) to allow for
duck typing.

Framework developers, if they know the input stream will be used with the
built-in read() in any upstream code they can't touch, B<SHOULD> use PerlIO or
a tied handle to work around with this problem.

The input stream objet is expected to provide a C<read> method:

=over 4

=item read

  $input->read($buf, $len [, $offset ]);

Returns the number of characters actually read, 0 at end of file, or
undef if there was an error.

=back

It may also implement an optional C<seek> method. If
C<psgix.input.buffered> environment is true, it <MUST> implement the
C<seek> method.

=over 4

=item seek

  $input->seek($pos, $whence);

Returns 1 on success, 0 otherwise.

=back

See the L<IO::Handle> documentation for more details on exactly how these
methods should work.

=head3 The Error Stream

The error stream in C<psgi.errors> is an L<IO::Handle>-like object to
print errors. The error stream must implement a C<print> method.

As with the input stream, Perl's built-in filehandles or L<IO::Handle> based
objects should work as-is in a PSGI server. Application developers B<SHOULD
NOT> inspect the type or class of the stream. Instead, they B<SHOULD> simply
call C<print> on the object.

=over 4

=item print

  $errors->print($error);

Returns true if successful.

=back

=head3 The Response

Applications B<MUST> return a response as either a three element array
reference, or a code reference for a delayed/streaming response.

The response array reference consists of the following elements:

=head4 Status

An HTTP status code. This B<MUST> be an integer greater than or equal to 100,
and B<SHOULD> be an HTTP status code as documented in L<RFC
2616|http://www.w3.org/Protocols/rfc2616>.

=head4 Headers

The headers B<MUST> be an array reference (B<not> a hash reference)
of key/value pairs. This means it B<MUST> contain an even number of elements.

The header B<MUST NOT> contain a key named C<Status>, nor any keys with C<:>
or newlines in their name. It B<MUST NOT> contain any keys that end in C<-> or
C<_>.

All keys B<MUST> consist only of letters, digits, C<_> or C<->. All
keys B<MUST> start with a letter. The value of the header B<MUST> be a
scalar string and defined. The value string B<MUST NOT> contain
characters below octal 037 i.e. chr(31).

If the same key name appears multiple times in an array ref, those
header lines B<MUST> be sent to the client separately (e.g. multiple
C<Set-Cookie> lines).

=head4 Content-Type

There B<MUST> be a C<Content-Type> except when the C<Status> is 1xx, 204
or 304, in which case there B<MUST NOT> be a content type.

=head4 Content-Length

There B<MUST NOT> be a C<Content-Length> header when the C<Status> is
1xx, 204 or 304.

If the Status is not 1xx, 204 or 304 and there is no C<Content-Length> header,
a PSGI server B<MAY> calculate the content length by looking at the Body. This
value can then be appended to the list of headers returned by the application.

=head4 Body

The response body B<MUST> be returned from the application as either
an array reference or a handle containing the response body as byte
strings. The body B<MUST> be encoded into appropriate encodings and
B<MUST NOT> contain wide characters (> 255).

=over 4

=item *

If the body is an array reference, it is expected to contain an array of lines
which make up the body.

  my $body = [ "Hello\n", "World\n" ];

Note that the elements in an array reference are B<NOT REQUIRED> to end
in a newline. A server B<SHOULD> write each elements as-is to the
client, and B<SHOULD NOT> care if the line ends with newline or not.

An array reference with a single value is valid. So C<[ $html ]> is a valid
response body.

=item *

The body can instead be a handle, either a Perl built-in filehandle or an
L<IO::Handle>-like object.

  open my $body, "</path/to/file";
  open my $body, "<:via(SomePerlIO)", ...;
  my $body = IO::File->new("/path/to/file");

  # mock class that implements getline() and close()
  my $body = SomeClass->new();

Servers B<SHOULD NOT> check the type or class of the body. Instead, they should
simply call C<getline> to iterate over the body, and
call C<close> when done.

Servers B<MAY> check if the body is a real filehandle using C<fileno> and
C<Scalar::Util::reftype>. If the body is real filehandle, the server B<MAY>
optimize using techniques like I<sendfile(2)>.

The body object B<MAY> also respond to a C<path> method. This method is
expected to return the path to a file accessible by the server. This allows
the server to use this information instead of a file descriptor number to
serve the file.

Servers B<SHOULD> set the C<$/> special variable to the buffer size when
reading content from C<$body> using the C<getline> method. This is done by
setting C<$/> with a reference to an integer (C<$/ = \8192>).

If the body filehandle is a Perl built-in filehandle L<IO::Handle> object,
they will respect this value. Similarly, an object which provides the same API
B<MAY> also respect this special variable, but are not required to do so.

=back

=head2 Delayed Response and Streaming Body

The PSGI interface allows applications and servers to provide a
callback-style response instead of the three-element array
reference. This allows for a delayed response and a streaming body
(server push).

This interface B<SHOULD> be implemented by PSGI servers, and
C<psgi.streaming> environment B<MUST> be set to true in such servers.

To enable a delayed response, the application B<SHOULD> return a
callback as its response. An application B<MAY> check if the
C<psgi.streaming> environment is true and falls back to the direct
response if it isn't.

This callback will be called with I<another> subroutine reference (referred to
as the I<responder> from now on) as its only argument. The I<responder>
should in turn be called with the standard three element array reference
response. This is best illustrated with an example:

  my $app = sub {
      my $env = shift;

      # Delays response until it fetches content from the network
      return sub {
          my $responder = shift;

          fetch_content_from_server(sub {
              my $content = shift;
              $responder->([ 200, $headers, [ $content ] ]);
          });
      };
  };

An application B<MAY> omit the third element (the body) when calling
the I<responder>. If the body is omitted, the I<responder> B<MUST>
return I<yet another> object which implements C<write> and C<close>
methods. Again, an example illustrates this best.

  my $app = sub {
      my $env = shift;

      # immediately starts the response and stream the content
      return sub {
          my $responder = shift;
          my $writer = $responder->(
              [ 200, [ 'Content-Type', 'application/json' ]]);

          wait_for_events(sub {
              my $new_event = shift;
              if ($new_event) {
                  $writer->write($new_event->as_json . "\n");
              } else {
                  $writer->close;
              }
          });
      };
  };

This delayed response and streaming API is useful if you want to
implement a non-blocking I/O based server streaming or long-poll Comet
push technology, but could also be used to implement unbuffered writes
in a blocking server.

=head2 Middleware

A I<middleware> component takes another PSGI application and runs it. From the
perspective of a server, a middleware component is a PSGI application. From
the perspective of the application being run by the middleware component, the
middleware is the server. Generally, this will be done in order to implement
some sort of pre-processing on the PSGI environment hash or post-processing on
the response.

Here's a simple example that appends a special HTTP header
I<X-PSGI-Used> to any PSGI application.

  # $app is a simple PSGI application
  my $app = sub {
      my $env = shift;
      return [ '200',
               [ 'Content-Type' => 'text/plain' ],
               [ "Hello World" ] ];
  };

  # $xheader is a piece of middleware that wraps $app
  my $xheader = sub {
      my $env = shift;
      my $res = $app->($env);
      push @{$res->[1]}, 'X-PSGI-Used' => 1;
      return $res;
  };

Middleware B<MUST> behave exactly like a PSGI application from the perspective
of a server. Middleware B<MAY> decide not to support the streaming interface
discussed earlier, but B<SHOULD> pass through the response types that it doesn't
understand.

=head1 CHANGELOGS

1.1: 2010.02.xx

=over 4

=item *

Added optional PSGI keys as extensions: C<psgix.logger> and C<psgix.session>.

=item *

C<psgi.streaming> B<SHOULD> be implemented by PSGI servers, rather than B<MAY>.

=item *

PSGI keys C<psgi.run_once>, C<psgi.nonblocking> and C<psgi.streaming>
B<MUST> be set by PSGI servers.

=item *

Removed C<poll_cb> from writer methods.

=back

=head1 ACKNOWLEDGEMENTS

Some parts of this specification are adopted from the following specifications.

=over 4

=item *

PEP333 Python Web Server Gateway Interface L<http://www.python.org/dev/peps/pep-0333>

=item *

Rack L<http://rack.rubyforge.org/doc/SPEC.html>

=item *

JSGI Specification L<http://jackjs.org/jsgi-spec.html>

=back

I'd like to thank authors of these great documents.

=head1 AUTHOR

Tatsuhiko Miyagawa E<lt>miyagawa@bulknews.netE<gt>

=head1 CONTRIBUTORS

The following people have contributed to the PSGI specification and
Plack implementation by commiting their code, sending patches,
reporting bugs, asking questions, suggesting useful advices,
nitpicking, chatting on IRC or commenting on my blog (in no particular
order):

  Tokuhiro Matsuno
  Kazuhiro Osawa
  Yuval Kogman
  Kazuho Oku
  Alexis Sukrieh
  Takatoshi Kitano
  Stevan Little
  Daisuke Murase
  mala
  Pedro Melo
  Jesse Luehrs
  John Beppu
  Shawn M Moore
  Mark Stosberg
  Matt S Trout
  Jesse Vincent
  Chia-liang Kao
  Dave Rolsky
  Hans Dieter Pearcey
  Randy J Ray
  Benjamin Trott
  Max Maischein
  Slaven Rezić
  Marcel Grünauer
  Masayoshi Sekimura
  Brock Wilcox
  Piers Cawley
  Daisuke Maki
  Kang-min Liu
  Yasuhiro Matsumoto
  Ash Berlin
  Artur Bergman
  Simon Cozens
  Scott McWhirter
  Jiro Nishiguchi
  Masahiro Chiba
  Patrick Donelan
  Paul Driver
  Florian Ragwitz

=head1 COPYRIGHT AND LICENSE

Copyright Tatsuhiko Miyagawa, 2009-2011.

This document is licensed under the Creative Commons license by-sa.

=cut
