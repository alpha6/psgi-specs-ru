=encoding utf-8

=head1 NAME

PSGI::FAQ - Часто задаваемые вопросы и ответы

=head1 ВОПРОСЫ

=head2 Общие вопросы

=head3 Как произносится PSGI?

Да просто Пэ-эС-Гэ-АЙ.

=head3 Так что же это?

PSGI это интерфейс между веб серверами и Perl веб приложениями аналогично тому,
чем является CGI для серверов и CGI скриптов.

=head3 Зачем это нам нужно?

Модуль CGI поставляется вместе с Perl, что в некотором роде обеспечивает
абстракцию над CGI, mod_perl и FastCGI. Однако большинство разработчиков веб
фреймворков (например, Catalyst и Jifty) обычно не используют этот модуль для
обеспечения производительности и доступа к низкоуровневым API. Поэтому они в
итоге приходят к написанию адаптеров для всех окружений, некоторые из которых
могут быть оттестированы лучше других.

PSGI позволяет разработчикам веб фреймворков реализовывать только адаптер для
PSGI. Конечные же пользователи могут выбирать любые поддерживающие PSGI
интерфейс серверные приложения.

=head3 PSGI похож на CGI. Каким образом PSGI интерфейс отличается от CGI?

PSGI интерфейс намеренно спроектирован очень похожим на CGI, чтобы поддержка
PSGI в дополнение к CGI была как можно проще.

=over 4

=item *

В CGI серверы это фактически веб серверы написанные на любом языке, в
основном на C, и скрипт это скрипт, который также может быть написан на любом
языке таком как C, Perl, Shell скриптах, Ruby или Python.

В PSGI серверы тоже веб серверы, но это уже perl процессы, которые обычно
встраиваются в веб сервер (как mod_perl) или же perl демоны, которые вызываются
веб сервером (как FastCGI), или веб серверы полностью реализованные на Perl. И
PSGI приложение это ссылка на Perl подпрограмму.

=item *

В CGI мы используем STDIN, STDERR и переменные окружения для чтения параметров,
тела HTTP запроса и сообщений об ошибках.

В PSGI мы используем ссылки на хеш C<$env> и потоки I<psgi.input> и
I<psgi.errors> для передачи данных между серверами и приложениями.

=item *

В CGI приложения должны отдавать HTTP заголовки и тело в STDOUT, чтобы передать
это обратно веб серверу.

В PSGI приложения должны вернуть код статуса HTTP, заголовки и тело (как ссылку
на массив или filehandle объект) серверу в качестве ссылки на массив.

=back

=head3 Мой фреймворк уже поддерживает CGI, FCGI и mod_perl. Зачем мне поддерживаеть PSGI?

Есть много разных преимуществ в поддержке PSGI для веб фреймворка.

=over 4

=item *

Можно не писать код для поддержки разных окружений веб серверов.

В Plack много хорошо протестированных адаптеров для серверных окружений как,
например, CGI, FastCGI и mod_perl. Так же много новых веб серверов написанных
специально для поддержки стандартного PSGI интерфейса, как, например,
L<Starman>, L<Starlet> и L<Twiggy>. Как только фреймворк поддерживает PSGI,
больше ничего не нужно, чтобы их использовать. И это без каких бы то ни было
усилий.

Также, даже если фреймворк уже поддерживает большинство серверых окружений, как
было сказано выше, можно отказаться от этого кода в пользу PSGI. Так поступили
L<Jifly> и L<Catalyst>, когда реализовали поддержку PSGI. Меньше кода значит
меньше багов :)

=item *

Фреймворк теперь может использовать все промежуточные компоненты Plack 

Если поискать L<Plack::Middleware> на CPAN можно найти сотни PSGI совместимых
промежуточных компонентов. Это часто написанные с нуля, но также и заимствующие
код из существующих плагинов для фреймворков таких как L<Catalyst>, модули.
Поддерживая PSGI интерфейс, фреймворк может использовать эти полезные
компоненты, будь то сессии, кеширование, перепизаписывание URL или отладочная
панель, и это только несколько из них.

=item *

Можно тестировать приложения используя единообразный интерфейс L<Plack::Test>.

Любое PSGI приложение может быть протестировано с помощью L<Plack::Test>, либо
через mock объекты, либо через запущенный сервер. Есть также
L<Test::WWW::Mechanize::PSGI> для тестирования в стиле Mechanize.

=back

=head3 Я пишу веб приложение. В чем для меня преимущество использования PSGI?

Если используется фреймворк поддерживающий PSGI, приложение может быть запущено
на любой существующей или будущей PSGI реализации. Необходимо предоставить
C<.psgi> файл, который возвращает PSGI приложение, и конечные пользователи
приложения смогут сконфигурировать и запустить его различными способами.

=head3 Но я пишу приложение на CGI и оно хорошо работает. Должен ли я переключаться на PSGI?

Если пишется веб приложение с использованием CGI.pm не используя веб фреймворки,
это ограничивает приложение для запуска только в CGI окружении, вместе с
mod_perl и FastCGI с некоторыми изменениями. Если у приложения один программист
и он же пользователь, то этого может быть вполне достаточно.

Однажды может появиться необходимость использования приложения на виртуальном
хостинге, или запуска сервера в автономном режиме, а не как CGI скрипт, или
распространение приложения как open source. Лимитирование приложения CGI окружением,
при этом используя CGI.pm, может аукнуться.

Можно начать использовать один из PSGI совместимых фреймворков (либо
полнофункциональных, либо микро), или использовать L<Plack::Request> если вы
против фреймворков, чтобы сделать приложение осведомленным о PSGI на будущеe.

Даже если вместо PSGI используется CGI для написания приложения, всегда можно
переключиться на PSGI используя L<CGI::PSGI> обертку.

=head3 Что нужно сделать, чтобы поддерживать PSGI?

Разработчикам веб серверов необходимо написать PSGI реализацию, называемую
PSGI приложением. Также стоит присоединиться к разработке Plack - PSGI
инструментария и утилит - чтобы добавить адаптер сервера.

Разработчикам веб фреймворков необходимо написать адаптер для PSGI. Это
освобождает от необходимости в поддержке разных серверных окружений.

Разработчикам веб приложений (или пользователям веб вреймворков) необходимо
выбрать фреймворк поддерживающий PSGI или попросить автора поддерживать
этот интерфейс :). Если приложение большого размера и не использует никаких
фреймворков (как, например, WebGUI или Movable Type) стоит следовать совету
разработчикам фреймворков. В этом случае написание адаптера будет иметь больший
смысл.

=head3 Быстрее ли PSGI чем (мой фреймворк)?

Опять же, PSGI это не реализация, но есть возможность написать очень быструю
реализацию PSGI, которая загружает все модули и испольняет полностью
оптимизированный код как автономный prefork сервер с XS парсерами, или как
событийно-ориентированный легковесный веб сервер написанний на С и встроенном
perl, который поддерживает PSGI, или старый добрый основанный на CGI.pm скрипт,
который не загружает никаких модулей вобще и выполняется довольно быстро без
использования большого количества памяти в CGI окружении.

Есть реализация prefork веб серверов такие как L<Starman> и L<Starlet>, а также
полнофункциональные асинхронные событийно-ориентированные реализации такие как
L<Twiggy>, L<Corona> или L<Feersum>. Они довольно быстрые и имеют Plack
адаптеры, так что их можно запускать через утилиту L<plackup>.

Пользователи фреймворка могут выбрать какой сервер больше подходит под их нужды.
Разработчику веб фреймворка нет необходимости думать о разных пользователях с
разными запросами.

=head2 Plack

=head3 Что такое Plack? В чем отличие между PSGI и Plack?

PSGI это спецификация, поэтому нет программы или модуля называемого PSGI.
Конечным пользователям необходимо определиться с серверной реализацией PSGI, чтобы
запускать PSGI приложения. Plack это множество PSGI утилит, которое также
включает PSGI сервер L<HTTP::Server::PSGI>, а также серверные
адаптеры под CGI, FastCGI или mod_perl.

Plack также имеет множество полезных API и вспомогательного кода над PSGI, как,
например L<Plack::Request> для обеспечения объектно-ориентированного API для
запросов, L<plackup>, что позволяет запускать PSGI приложения из командной
строки и конфигурировать их с помощью C<app.psgi> (аналог Rackup из Rack), и
L<Plack::Test> что позволяет тестировать приложения используя стандартную пару
L<HTTP::Request> и L<HTTP::Response> через mock или запущенный сервер. Смотрите
L<Plack>.

=head3 Какие серверы будут доступны?

В Plack поддерживается уже большинство серверов таких как Apache2, а также те,
которые поддерживают CGI или FastCGI, есть попытки поддерживать веб сервера,
которые могут встраивать Perl, такие как Perlbal или nginx. Было бы хорошо, если
бы модуль Apache mod_perlite и Google AppEngine тоже поддерживали PSGI, чтобы
можно было запускать PSGI/Plack приложение в облаке.

=head3 Ruby это Rack, JavaScript это Jack. Почему это не называется Pack?

Да, Pack это действительно милое имя, но у Perl есть встроенная функция pack,
поэтому это может сбить с толку, особенно когда об этом рассказывают, а не
пишут.

=head3 Какой префикс стоит использовать реализовывая PSGI поддержку?

B<Не используйте PSGI:: префикс для реализаций PSGI серверов или адаптеров>.

PSGI префикс зарезервирован для PSGI спецификации и перечня юнит тестов, которые
должны проходиться разработчиками. Он не должен использоваться для конкретных
реализаций.

Если пишется плагин или расширение для поддержки PSGI для (воображаемого) веб
фреймворка С<Camper>, назовайте модуль C<Camper::Engine::PSGI>.

Если пишется веб сервер с поддержкой интерфейса PSGI, тогда можно назвать его
как угодно. Опционально можно поддерживать абстрактный интерфейс
L<Plack::Handler> или написать адаптер, например:

  my $server = Plack::Handler::FooBar->new(%opt);
  $server->run($app);

Поддерживая C<new> и C<run>, сервер становится совместимым с C<plackup>, и
пользователи смогут запускать приложения с помощью C<plackup>. Рекомендуется, но
не требуется, следовать этому API, правда придется реализовать собственный
модуль для запуска PSGI приложений.

=head3 У меня есть CGI или mod_perl приложение, которое я хочу запусть на PSGI/Plack. Что мне следует делать?

Есть несколько вариантов:

=over 4

=item CGI::PSGI

Если есть веб приложение (или фреймворк) которое использует CGI.pm для разбора
параметров запроса, L<CGI::PSGI> поможет мигрировать на PSGI. Необходимо будет
изменить создание CGI объектов и возврат заголовков и тела ответа, остальной же
код останется без изменений.

=item CGI::Emulate::PSGI и CGI::Compile

Если есть старый мертвый CGI скрипт, который хотелось бы минимально изменить
(или не менять вообще), тогда L<CGI::Emulate::PSGI> и L<CGI::Compile>
скомпилируют и обернут скрипт как PSGI приложение.

По сравнению с L<CGI::PSGI> это не так эффективно из-за перехвата STDIN/STDOUT и
переписывания окружения, но должно работать с любой CGI реализацией, не только
CGI.pm, кроме того L<CGI::Compile> компилирует CGI скрипт в CODEREF
точно также как это делает Registry в mod_perl.

=item Plack::Request и Plack::Response

Если имеется L<HTTP::Engine> приложение (фреймворк), или необходимо написать его
с нуля, но с использованием лучшего, чем CGI, интерфейса, или нравится интерфейс
L<Apache::Request>, тогда L<Plack::Request> и L<Plack::Response> это то, что
нужно. Они предоставляют удобное Request/Response объектное API для упрощения
работы с хешом окружения и возвращают правильный массив со статусом, заголовками
и телом ответа.

=back

ПРИМЕЧАНИЕ: Не стоит забывать, что когда имеющийся CGI скрипт, который
выполняется один раз и завершается, используют как постоянный процесс, может
потребоваться очистка после каждого запроса: переменные, которые должны быть
обнулены; файлы, которые должны быть закрыты или удалены и т.д. PSGI ничего не
может сделать по этому поводу (необходима реализация), кроме как напомнить в
этом примечании.

=head2 HTTP::Engine

=head3 Почему PSGI/Plack вместо HTTP::Engine?

HTTP::Engine был хорошим экспериментом, но там совмещен интерфейс приложения
(C<request_handler> интерфейс) с реализациями, а монолитная классовая иерархия и
интерфейсы, выполненные на ролях, делают сложным написание нового сервера.
Существующий HTTP::Engine был разбит на три части: спецификация интерфейса
(PSGI), имплементация серверов (Plack::Handler) и стандартное API и утилиты
(Plack).

=head3 Умрет ли HTTP::Engine?

Он не умрет. HTTP::Engine останется таким каким есть и может быть полезным, если
необходимо написать микро вебсерверное приложение, а не фреймворк.

=head3 Должен ли я переписать HTTP::Engine приложение, чтобы следовать интерфейсу PSGI?

Нет, необходимости в переписывании HTTP::Engine приложения нет. Оно может быть
просто превращено в PSGI приложение с помощью L<HTTP::Engine::Interface::PSGI>.

В качестве альтернативы можно использовать L<Plack::Request> и
L<Plack::Response>, что предоставляет совместимое c L<HTTP::Engine::Request> и
L<HTTP::Engine::Response> API:

  use Plack::Request;
  use Plack::Response;

  sub request_handler {
      my $req = Plack::Request->new(shift);
      my $res = Plack::Response->new;
      # ...
      return $res->finalize;
  }

Метод C<request_handler> это и есть PSGI приложение.

=head2 API Дизайн

Стоит учитывать, что большинство вопросов проектирования в PSGI спецификации
обусловлены минимизацией требований к серверным приложениям, чтобы они могли
по-своему оптимизировать. Добавление модного интерфейса или излишняя гибкость на
разных уровнях PSGI может звучать притягательно для пользователей, но это только
добавит вещей, которые серверы должны поддерживать, что будет стоять на пути
оптимизации, или будет добавлять ошибки. Привлекать разработчиков с помощью
модного API должен фреймворк, а не PSGI.

=head3 Почему большой хеш окружения вместо объектов с API?

Простота интерфейса это ключевая делать, которая сделала WSGI и Rack успешными.
PSGI это низкоуровневый интерфейс между серверами и разработчиками веб
фреймворков. Если бы требовалось API какого типа объект должен передаваться и
какие методы он должен реализовывать, будет слишком много дублирующего кода в
серверных приложениях, части которых могут содержать ошибки.

Например, PSGI определяет C<< $env->{SERVER_NAME} >> как строку. Что если PSGI
спецификация требовала объект типа Net::IP? Код серверного приложения должен
будет зависеть от модуля Net::IP, или реализовывать похожий объект с таким же
интерфейсом, реализовывая ВСЕ методы Net::IP. Серверы, которые зависят от
специфических модулей или вынуждены реализовывать новые велосипеды, считаются
вредными и поэтому интерфейс остается минимальным насколько это возможно.

Разработка хорошего API для конечных пользователей должно быть работой веб
фреймворка (разработчиков адаптеров), а не чем-то, что определяется PSGI.

=head3 Почему приложение это CODEREF, а не объект с методом ->call?

Требование объекта I<в дополнение к> CODEREF сделает КАЖДОЕ серверное приложение
на несколько строчек длиннее, а требование объекта I<вместо> CODEREF будет
вынуждать разработчиков приложения реализовывать очередной класс и создавать его
экземпляр.

Другими словами, да, объект с методом C<call> будет работать, но, опять же, PSGI
был спроектирован минимальным насколько это возможно, и сделать из объекта
CODEREF совсем не сложно, что в обратном случае требует несколько дополнительных
строчек и, возможно, даже новый файл.

=head3 Почему заголовки возвращаются как ссылка на массив, а не ссылка на хеш?

Если коротко: Для поддержки заголовков с одинаковыми именами (например, C<Set-Cookie>).

Если длинно: В Python WSGI заголовки ответа это список (C<header_name>,
C<header_value>) I<кортежей>, например, C<type(response_headers) is ListType>,
поэтому у каждого заголовка может быть несколько значений. В Rack и JSGI
значение заголовка это String состоящая из строк разделенных "C<\n>".

Спецификация Python кажется наиболее приемлимой, но так как в Perl хеши не могут
содержать записи с одинаковыми ключами (исключение составляют C<tie>),
использование ссылки на массив для хранения значений
C<< [ key => value, key => value ] >> самое простое решение для обеспечения
простоты адаптеров фреймворков и серверов. Другие возможности, как ссылка на
массив или обычный скаляр, делают код излишне муторным.

=head3 Я хочу отправлять Unicode данные в HTTP ответе. Как я могу это сделать?

PSGI имитирует протокол CGI и интерфейс сильно не заботится о символьной
кодировке или строковой семантике. Это значит, что все данные в PSGI окружении,
теле ответа и пр. отправляются как байты, и это обязанность приложения правильно
декодировать или кодировать символы для отправки по HTTP.

Если есть декодированная строка в приложении и необходимо отправить данные как
C<UTF-8> в теле HTTP, нужно использовать модуль L<Encode> для кодирования в
utf-8. Если используется PSGI фреймворк, есть возможность, что он позволяет
устанавливать текст ответа в Unicode. Стоит проверить документацию фреймворка
так это или нет.

Это решение было принятно для большей гибкости PSGI приложений и фреймворков,
без добавления сложностей в PSGI серверы и в саму спецификацию интерфейса.

=head3 No iterators support in $body?

We learned that WSGI and Rack really enjoy the benefit of Python and
Ruby's language beauty, which are iterable objects in Python or
iterators in Ruby.

Rack, for instance, expects the body as an object that responds to
the C<each> method and then yields the buffer, so

  body.each { |buf| request.write(buf) }

would just magically work whether body is an Array, FileIO object or an
object that implements iterators. Perl doesn't have such a beautiful
thing in the language unless L<autobox> is loaded.  PSGI should not make
autobox as a requirement, so we only support a simple array ref or file
handle.

Writing an IO::Handle-like object is pretty easy since it's only
C<getline> and C<close>. You can also use PerlIO to write an object that
behaves like a filehandle, though it might be considered a little
unstable.

See also L<IO::Handle::Util> to turn anything iterators-like into
IO::Handle-like.

=head3 How should server determine to switch to sendfile(2) based serving?

First of all, an application SHOULD always set a IO::Handle-like
object (or an array of chunks) that responds to C<getline> and
C<close> as a body. That is guaranteed to work with any servers.

Optionally, if the server is written in perl or can tell a file
descriptor number to the C-land to serve the file, then the server MAY
check if the body is a real filehandle (possibly using
L<Plack::Util>'s C<is_real_fh> function), then get a file descriptor
with C<fileno> and call sendfile(2) or equivalent zero-copy data
transfer using that.

Otherwise, if the server can't send a file using the file descriptor
but needs a local file path (like mod_perl or nginx), the application
can return an IO::Handle-like object that also responds to C<path>
method. This type of IO-like object can easily be created using
L<IO::File::WithPath>, L<IO::Handle::Util> or L<Plack::Util>'s
C<set_io_path> function.

Middlewares can also look to see if the body has C<path> method and
does something interesting with it, like setting C<X-Sendfile>
headers.

To summarize:

=over 4

=item *

When to serve static files, applications should always return a real
filehandle or IO::Handle object. That should work everywhere, and can
be optimized in some environments.

=item *

Applications can also set IO::Handle like object with an additional
C<path> method, then it should work everywhere again, and can be
optimized in even more environments.

=back

=head3 What if I want to stream content or do a long-poll Comet?

The most straightforward way to implement server push is for your
application to return a IO::Handle-like object as a content body that
implements C<getline> to return pushed content. This is guaranteed to
work everywhere, but it's more like I<pull> than I<push>, and it's
hard to do non-blocking I/O unless you use Coro.

If you want to do server push, where your application runs in an event
loop and push content body to the client as it's ready, you should
return a callback to delay the response.

  # long-poll comet like a chat application
  my $app = sub {
      my $env = shift;
      unless ($env->{'psgi.streaming'}) {
          die "This application needs psgi.streaming support";
      }
      return sub {
          my $respond = shift;
          wait_for_new_message(sub {
              my $message = shift;
              my $body = [ $message->to_json ];
              $respond->([200, ['Content-Type', 'application/json'], $body]);
          });
      };
  };

C<wait_for_new_message> can be blocking or non-blocking: it's up to
you. Most of the case you want to run it non-blockingly and should use
event loops like L<AnyEvent>. You may also check C<psgi.nonblocking>
value to see that it's possible and fallback to a blocking call
otherwise.

Also, to stream the content body (like streaming messages over the
Flash socket or multipart XMLHTTPRequest):

  my $app = sub {
      my $env = shift;
      unless ($env->{'psgi.streaming'}) {
          die "This application needs psgi.streaming support";
      }
      return sub {
          my $respond = shift;
          my $writer = $respond->([200, ['Content-Type', 'text/plain']]);
          wait_for_new_message(sub {
              my $message = shift;
              if ($message) {
                  $writer->write($message->to_json);
              } else {
                  $writer->close;
              }
          });
      };
  };

=head3 Which framework should I use to do streaming though?

We have servers that support non-blocking (where C<psgi.nonblocking>
is set to true), but the problem is that framework side doesn't
necessarily support asynchronous event loop. For instance Catalyst has
C<write> method on the response object:

  while ($cond) {
      $c->res->write($some_stuff);
  }

This should work with all servers with C<psgi.streaming> support even
if they are blocking, and it should be fine if they're running in
multiple processes (C<psgi.multiprocess> is true).

L<Catalyst::Engine::PSGI> also supports setting an IO::Handle-like
object that supports C<getline>, so using L<IO::Handle::Util>

  my $io = io_from_getline sub {
       return $data; # or undef when done()
  };
  $c->res->body($io);

And that works fine to do streaming, but it's blocking (I<pull>)
rather than asynchronous server push, so again you should be careful
not to run this application on non-blocking (and non-multiprocess)
server environments.

We expect that more web frameworks will appear that is focused on, or
existent frameworks will add support for, asynchronous and
non-blocking streaming interface.

=head3 Is psgi.streaming interface a requirement for the servers?

It is specified as B<SHOULD>, so unless there is a strong reason not
to implement the interface, all servers are encouraged to implement
this interface.

However, if you implement a PSGI server using an Perl XS interface for
the ultimate performance or integration with web servers like Apache
or nginx, or implement a sandbox like environment (like Google
AppEngine or Heroku) or distributed platform using tools like Gearman,
you might not want to implement this interface.

That's fine, and in that case applications relying on the streaming
interface can still use L<Plack::Middleware::BufferedStreaming> to
fallback to the buffered write on unsupported servers.

=head3 Why CGI-style environment variables instead of HTTP headers as a hash?

Most existing web application frameworks already have code or a handler
to run under the CGI environment. Using CGI-style hash keys instead of
HTTP headers makes it trivial for the framework developers to implement
an adapter to support PSGI. For instance, L<Catalyst::Engine::PSGI> is
only a few dozens lines different from L<Catalyst::Engine::CGI> and was
written in less than an hour.

=head3 Why is PATH_INFO URI decoded?

To be compatible with CGI spec (RFC 3875) and most web servers'
implementations (like Apache and lighttpd).

I understand it could be inconvenient that you can't distinguish
C<foo%2fbar> from C<foo/bar> in the trailing path, but the CGI spec
clearly says C<PATH_INFO> should be decoded by servers, and that web
servers can deny such requests containing C<%2f> (since such requests
would lose information in PATH_INFO). Leaving those reserved characters
undecoded (partial decoding) would make things worse, since then you
can't tell C<foo%2fbar> from C<foo%252fbar> and could be a security hole
with double encoding or decoding.

For web application frameworks that need more control over the actual
raw URI (such as L<Catalyst>), we made the C<REQUEST_URI> environment
hash key REQUIRED. The servers should set the undecoded (unparsed)
original URI (containing the query string) to this key. Note that
C<REQUEST_URI> is completely raw even if the encoded entities are
URI-safe.

For comparison, WSGI (PEP-333) defines both C<SCRIPT_NAME> and
C<PATH_INFO> be decoded and Rack leaves it implementation dependent,
while I<fixing> most of PATH_INFO left encoded in Ruby web server
implementations.

L<http://www.python.org/dev/peps/pep-0333/#url-reconstruction>
L<http://groups.google.com/group/rack-devel/browse_thread/thread/ddf4622e69bea53f>

=head1 SEE ALSO

WSGI's FAQ clearly answers lots of questions about how some API design
decisions were made, some of which can directly apply to PSGI.

L<http://www.python.org/dev/peps/pep-0333/#questions-and-answers>

=head1 MORE QUESTIONS?

If you have a question that is not answered here, or things you totally
disagree with, come join the IRC channel #plack on irc.perl.org or
mailing list L<http://groups.google.com/group/psgi-plack>. Be sure you
clarify which hat you're wearing: application developers, server
implementors or middleware developers. And don't criticize the spec just
to criticize it: show your exact code that doesn't work or get too messy
because of spec restrictions etc. We'll ignore all nitpicks and bikeshed
discussion.

=head1 AUTHOR

Tatsuhiko Miyagawa E<lt>miyagawa@bulknews.netE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright Tatsuhiko Miyagawa, 2009-2010.

This document is licensed under the Creative Commons license by-sa.

=cut
